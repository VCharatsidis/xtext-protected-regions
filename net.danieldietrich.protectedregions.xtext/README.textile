h1(#top). Xtext Protected Region Support

The _Xtext Extension_ documentation is addressed to developers who want to benefit of protected region support in conjunction with Xtext.

h2(#toc). Table of Contents

* "Table of Contents":#toc
* "Motivation":#motivation
* "Usage":#usage
** "Plugin Configuration":#pluginconfig
** "Runtime Module Configuration":#runtimemoduleconfig
** "Portable Generators":#portablegenerators
** "Generator Configuration"#generatorconfig
*** "MWE2 Workflow":#mwe2workflow
*** "Standalone Generator":#standalonegenerator

"top":#top

h2(#motivation). Motivation

Lets assume you're already familiar with "Xtext":http://www.xtext.org. Then your existing IGenerator implementation likely will look like this:

bc.. void doGenerate(Resource input, IFileSystemAccess fsa) {

  // negleting iteration of input here
  CharSequence generatedCode = compile(...);
  
  // write generated code to file system
  fsa.generateFile(fileName, slot, generatedCode);
  
}

p. where @generatedCode@ is a CharSequence containing your generated code. *The goal is to preserve manual changes of the previously generated code*. These changes are denoted in so called "protected regions":https://github.com/danieldietrich/xtext-protectedregions/blob/master/net.danieldietrich.protectedregions/README.textile#intro.

"top":#top

h2(#usage). Usage

h3(#pluginconfig). Plugin Configuration

Edit your plug-in's @META-INF/MANIFEST.MF@ to add all necessary dependencies to Xtext Protected Region Support:

bc.. Require-Bundle: net.danieldietrich.protectedregions.core;bundle-version="1.0.0",
 net.danieldietrich.protectedregions.xtext;bundle-version="1.0.0"

Import-Package: org.apache.commons.io,
 org.slf4j

p. "top":#top

h3(#runtimemoduleconfig). Runtime Module Configuration

Configure Guice to provide @JavaIoFileSystemAccess@ in your @RuntimeModule@ class.

*Example:*

bc.. public class MyRuntimeModule extends AbstractMyRuntimeModule {

  @Provides
  public JavaIoFileSystemAccess createJavaIoFileSystemAccess(ProtectedRegionSupport support) {
    support.addParser(RegionParserFactory.createJavaParser(), ".java");
    BidiJavaIoFileSystemAccess fsa = new BidiJavaIoFileSystemAccess(support);
    // fsa.setFilter(...); // (optional)
    return fsa;
  }
}

p. "top":#top

h3(#portablegenerators). Portable Generators

Your existing generator remains untouched.

bc.. override void doGenerate(Resource resource, IFileSystemAccess fsa) {

  // Look ma! Portable generators! No "proprietary" APIs, simply Xtext!
  fsa.generateFile(fileName, '''...Xtend/Xpand template here...''')

}

p. "top":#top

h3(#generatorconfig). Generator Configuration

Depending on whether you are using a MWE2 workflow or a standalone generator you might also want to modify the output path(s):

h4(#mwe2workflow). MWE2 Workflow

With MWE2 workflows, output paths are declared like this:

bc. Workflow {
  // ...
  component = org.eclipse.xtext.generator.GeneratorComponent {
    // ...
    outlet = {
      path = targetDir
    }
  }
}

h4(#standalonegenerator). Standalone Generator

Assuming that @fsa@ is an implementation of @AbstractFileSystemAccess@ (like @JavaIoFileSystemAccess@), output paths are configured as follows:

bc. fsa.setOutputPath(...); // triggers loading protected regions in the background(!)

"top":#top
