h1. Protected Region Support - Xtext Extension

h2. Bidi FileSystemAccess

Xtext FileSystemAccess interface (@IBiFileSystemAccess@) and implementations with extended read operations, useful for implementing protected region support.

h2. Usage

Edit your plug-in's @META-INF/MANIFEST.MF@ to import Xtext Protected Region Support packages:

bc. 
Import-Package: net.danieldietrich.protectedregions.core,
 net.danieldietrich.protectedregions.support,
 net.danieldietrich.protectedregions.xtext

Configure Guice to provide @JavaIoFileSystemAccess@ in your @RuntimeModule@ class. Example:

bc.. 
import net.danieldietrich.xtext.bifsa.IBiFileSystemAccess
import net.danieldietrich.xtext.generator.protectedregions.RegionParserFactory
import net.danieldietrich.protectedregions.xtext.IBidiFileSystemAccess
import net.danieldietrich.protectedregions.xtext.ProtectedRegionSupport
import net.danieldietrich.protectedregions.core.RegionParserFactory

public class GlprotoRuntimeModule extends com.soluvas.glproto.AbstractGlprotoRuntimeModule {

	@Provides
	public JavaIoFileSystemAccess createJavaIoFileSystemAccess() {
    	JavaIoFileSystemAccess fsa = new JavaIoWrapper(new IProtectedRegionSupportConfigurer() {
			
			@Override
			public void configure(ProtectedRegionSupport.Builder builder) {
			    builder.addParser(RegionParserFactory.createJavaParser(), ".java")
			    	.addParser(RegionParserFactory.createXmlParser(), ".xml")
			    	.read("", IFileSystemAccess.DEFAULT_OUTPUT);
			}
			
		});
    	return fsa;
	}
	
}

p. Use it in your generator:

bc.. 
IFileSystemAccess fsa
Model model

override void doGenerate(Resource resource, IFileSystemAccess fsa) {
	
	this.fsa = fsa
	this.model = resource.contents.get(0) as Model
	
	...

	// Look ma! Portable generators! No "proprietary" APIs, simply Xtext!
	fsa.generateFile(fileName, '''...Xtend/Xpand template here...''')
}
