h1(#top). Xtext Protected Region Support

h2(#toc). Table of Contents

* "Table of Contents":#toc
* "Documentation":#documentation
* "Installtion":#installation
** "Prequisites":#prequisites
** "Download":#download
** "Setup Eclipse Workspace":#workspace
* "Terminology":#terminology
** "Code Generation":#codegen

"top":#top

h2(#documentation). Documentation

Further documentation of the subprojects can be found here:

* "Protected Regions Core":https://github.com/danieldietrich/xtext-protectedregions/blob/master/net.danieldietrich.protectedregions.core/README.textile
* "Xtext Protected Region Support":https://github.com/danieldietrich/xtext-protectedregions/blob/master/net.danieldietrich.protectedregions.xtext/README.textile

"top":#top

h2(#installation). Installation

h3(#prequisites). Prequisites

The following software should be installed to your system:

* "JDK 6+":http://www.oracle.com/technetwork/java/javase/downloads/index.html (The only feature used of v6 is the @Override annotation with interface implementations.)
* "Eclipse (Indigo)":http://www.eclipse.org/downloads/ (The JEE version is fine.)
* "Git":http://git-scm.com/
* "Maven":http://maven.apache.org/download.html

Please install the following plugins (via Marketplace) with _Eclipse_:

* EGit - Git Team Provider
* Maven Integration for Eclipse (m2e)

"top":#top

h3(#download). Download

To get a local copy of xtext-protectedregions you have to clone it from GitHub:

```git clone git@github.com:danieldietrich/xtext-protectedregions.git```

"top":#top

h3(#workspace). Setup Eclipse Workspace

* In Eclipse select Import / Maven / Existing Maven Projects and navigate to the root of xtext-protectedregions cloned before. Download necessary plugins if asked for.
* Open _indigo.target_ (located in _net.danieldietrich.protectedregions.target_) and select _Set as Target Platform_ (upper right corner).
* To connect the projects with the local git repository select Team / Share Project / Git / Use or create repository in parent folder of project and select/add the local xtext-protectedregions repository from/to the list.

"top":#top

h2(#terminology). Terminology

h3(#codegen). Code Generation

In the following we will talk about _generated code_. The code is generated by a generator. A generator has an input and an output. The input is a (representation of a) document. The content of the document is text. The generator assumes, that the text is grammatical correct, where the grammar is previously defined by a developer. All syntactical correct sentences (perhaps infinite!), which are conform to the given grammar are forming a language. In our case this language is called domain specific language, short dsl, because it describes a business domain.

Ok, there is a dsl, a language in which one can write documents. The generator knows an object representation of such a document, called model. With the help of a special programming language (Xtend2) the model is (programmatically) interpreted, producing characters on the way. These characters are written to the output, the generated code.

Once again, in a few words: generated code is understood as a sequence of characters which where produced by traversing the object tree/graph representation of a given model. A model is an instance of a domain specific language.
